<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccDecision" xml:space="preserve">
    <value>Вы хотите зарегистрировать новый аккаунт или войти в уже существующий?</value>
  </data>
  <data name="AccountAlert" xml:space="preserve">
    <value>Итак, чтобы сделать заказ, нужно иметь аккаунт. Давайте создадим его!</value>
  </data>
  <data name="AccountCreated" xml:space="preserve">
    <value>Ура! Теперь с аккаунтом вы можете что-нибудь купить.</value>
  </data>
  <data name="Alcoholic" xml:space="preserve">
    <value>Акогольное</value>
  </data>
  <data name="back" xml:space="preserve">
    <value>назад</value>
  </data>
  <data name="Bad input format" xml:space="preserve">
    <value>Неправильный формат ввода!</value>
  </data>
  <data name="buy" xml:space="preserve">
    <value>купить</value>
  </data>
  <data name="Can'tBuyAlco" xml:space="preserve">
    <value>Вам нельзя купить алкоголь!</value>
  </data>
  <data name="cm" xml:space="preserve">
    <value>см</value>
  </data>
  <data name="Composition" xml:space="preserve">
    <value>Состав</value>
  </data>
  <data name="Cost" xml:space="preserve">
    <value>Цена</value>
  </data>
  <data name="DateFormat" xml:space="preserve">
    <value>Правильный формат - ДД.ММ.ГГГГ.</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Описание</value>
  </data>
  <data name="Discount" xml:space="preserve">
    <value>Скидка</value>
  </data>
  <data name="drink" xml:space="preserve">
    <value>напиток</value>
  </data>
  <data name="Empty" xml:space="preserve">
    <value>&lt;Пусто&gt;</value>
  </data>
  <data name="enlarge" xml:space="preserve">
    <value>больше</value>
  </data>
  <data name="Enter" xml:space="preserve">
    <value>Введите</value>
  </data>
  <data name="EnterAdress" xml:space="preserve">
    <value>Введите адрес, пожалуйста</value>
  </data>
  <data name="EnterBirthDate" xml:space="preserve">
    <value>Введите дату своего рождения в формате ДД.ММ.ГГГГ</value>
  </data>
  <data name="EnterInt" xml:space="preserve">
    <value>Введите целое число!</value>
  </data>
  <data name="EnterLogin" xml:space="preserve">
    <value>Введите логин, пожалуйста</value>
  </data>
  <data name="EnterLogPas" xml:space="preserve">
    <value>Введите логин и пароль через пробел</value>
  </data>
  <data name="EnterName" xml:space="preserve">
    <value>Введите своё имя, пожалуйста</value>
  </data>
  <data name="EnterPassword" xml:space="preserve">
    <value>Введите пароль, пожалуйста</value>
  </data>
  <data name="EnterSmt" xml:space="preserve">
    <value>Пожалуйста, введите что-нибудь!</value>
  </data>
  <data name="exit" xml:space="preserve">
    <value>выход</value>
  </data>
  <data name="Finishing" xml:space="preserve">
    <value>Завершение</value>
  </data>
  <data name="Fried" xml:space="preserve">
    <value>Обработанный</value>
  </data>
  <data name="g" xml:space="preserve">
    <value>г</value>
  </data>
  <data name="Guest" xml:space="preserve">
    <value>Гость</value>
  </data>
  <data name="Hello1" xml:space="preserve">
    <value>Привет! Меня зовут</value>
  </data>
  <data name="Hello2" xml:space="preserve">
    <value>- Ваш бот-ассистент, который поможет вам оформить заказ.</value>
  </data>
  <data name="Hello3" xml:space="preserve">
    <value>Ответьте что-нибудь, чтобы начать.</value>
  </data>
  <data name="Henry" xml:space="preserve">
    <value>Генри</value>
  </data>
  <data name="HowMany" xml:space="preserve">
    <value>Сколько вы хотите?</value>
  </data>
  <data name="Incorrect email format" xml:space="preserve">
    <value>Неправильный формат почтового адреса!</value>
  </data>
  <data name="InfoAbout" xml:space="preserve">
    <value>Информация продукта</value>
  </data>
  <data name="login" xml:space="preserve">
    <value>войти</value>
  </data>
  <data name="Not alcoholic" xml:space="preserve">
    <value>Не алкогольное</value>
  </data>
  <data name="Order" xml:space="preserve">
    <value>Заказ</value>
  </data>
  <data name="Order is completed" xml:space="preserve">
    <value>Заказ готов!</value>
  </data>
  <data name="Order is delivered" xml:space="preserve">
    <value>Заказ доставлен! Не забудьте его забрать.</value>
  </data>
  <data name="Order is paid" xml:space="preserve">
    <value>Заказ оплачен. Благодарим Вас.</value>
  </data>
  <data name="Our menu" xml:space="preserve">
    <value>Наше меню</value>
  </data>
  <data name="pizza" xml:space="preserve">
    <value>пицца</value>
  </data>
  <data name="Raw" xml:space="preserve">
    <value>Сырой</value>
  </data>
  <data name="reduce" xml:space="preserve">
    <value>меньше</value>
  </data>
  <data name="register" xml:space="preserve">
    <value>регистрация</value>
  </data>
  <data name="remove" xml:space="preserve">
    <value>убрать</value>
  </data>
  <data name="Score" xml:space="preserve">
    <value>Рейтинг</value>
  </data>
  <data name="see basket" xml:space="preserve">
    <value>посмотреть корзину</value>
  </data>
  <data name="ShouldHaveAcc" xml:space="preserve">
    <value>Итак, чтобы сделать заказ, нужно иметь аккаунт.</value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>Размер</value>
  </data>
  <data name="sushi" xml:space="preserve">
    <value>суши</value>
  </data>
  <data name="take" xml:space="preserve">
    <value>взять</value>
  </data>
  <data name="Thank you" xml:space="preserve">
    <value>Спасибо!</value>
  </data>
  <data name="ToConfirm" xml:space="preserve">
    <value>для подтверждения</value>
  </data>
  <data name="Total" xml:space="preserve">
    <value>Всего</value>
  </data>
  <data name="TotalPrice" xml:space="preserve">
    <value>Итоговая цена</value>
  </data>
  <data name="Try again" xml:space="preserve">
    <value>Попробуйте ещё раз.</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Я не знаю такой команды :(</value>
  </data>
  <data name="Volume" xml:space="preserve">
    <value>Объём</value>
  </data>
  <data name="Weight" xml:space="preserve">
    <value>Вес</value>
  </data>
  <data name="WhatToOrder" xml:space="preserve">
    <value>Что вы хотите заказать?</value>
  </data>
  <data name="With gase" xml:space="preserve">
    <value>С газом</value>
  </data>
  <data name="Without gase" xml:space="preserve">
    <value>Без газа</value>
  </data>
  <data name="Your basket" xml:space="preserve">
    <value>Ваша корзина</value>
  </data>
  <data name="Your decision" xml:space="preserve">
    <value>Ваше решение</value>
  </data>
</root>